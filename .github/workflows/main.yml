# This is a basic workflow to help you get started with Actions

name: CI

# Controls when the action will run. Triggers the workflow on push or pull request
# events but only for the master branch
on: [push, pull_request]

# A workflow run is made up of one or more jobs that can run sequentially or in parallel
jobs:
  # This workflow contains a job called "build"
  build:
    strategy:
      matrix:
        replica: ["simplemd", "lammps", "quantum_espresso", "i-pi", "gromacs"]
    # The type of runner that the job will run on
    runs-on: ubuntu-latest

    # Steps represent a sequence of tasks that will be executed as part of the job
    steps:
    # Checks-out your repository under $GITHUB_WORKSPACE, so your job can access it
    - uses: actions/checkout@v2

    - uses: actions/cache@v2
      with:
        path: |
          ~/opt
          ~/.ccache
        key: ccache-${{ runner.os }}-${{ github.sha }}
        restore-keys: ccache-${{ runner.os }}-

    - name: Set up Python 3.9
      uses: actions/setup-python@v5
      with:
        python-version: 3.9

    - name: Set paths
      run: |
        echo "$HOME/opt/bin" >> $GITHUB_PATH
        echo "CPATH=$HOME/opt/include:$HOME/opt/libtorch/include/torch/csrc/api/include/:$HOME/opt/libtorch/include/:$HOME/opt/libtorch/include/torch:$CPATH" >> $GITHUB_ENV
        echo "INCLUDE=$HOME/opt/include:$HOME/opt/libtorch/include/torch/csrc/api/include/:$HOME/opt/libtorch/include/:$HOME/opt/libtorch/include/torch:$INCLUDE" >> $GITHUB_ENV
        echo "LIBRARY_PATH=$HOME/opt/lib:$HOME/opt/libtorch/lib:$LIBRARY_PATH" >> $GITHUB_ENV
        echo "LD_LIBRARY_PATH=$HOME/opt/lib:$HOME/opt/libtorch/lib:$LD_LIBRARY_PATH" >> $GITHUB_ENV
        echo "PYTHONPATH=$HOME/opt/lib/plumed/python:$PYTHONPATH" >> $GITHUB_ENV
        # needed to avoid MPI warning
        echo "OMPI_MCA_btl=^openib" >> $GITHUB_ENV

    - name: Install PLUMED software
      run: |
        sudo apt update
        sudo apt install mpi-default-bin mpi-default-dev gfortran
        sudo apt install libfftw3-dev gsl-bin libgsl0-dev libboost-serialization-dev
        sudo apt install ccache
        sudo apt-get update
        pip install PyYAML pytz
        pip install nbconvert
        pip install numpy
        pip install nbformat
        pip install PlumedToHTML
        pip install cython
        pip install MDAnalysis
        git clone --bare https://github.com/plumed/plumed2.git
        sudo ln -s ccache /usr/local/bin/mpic++
        export PATH=/usr/lib/ccache:${PATH}
        ccache -s
        .ci/install.libtorch
        # version=master or version=f123f12f3 to select a specific version
        # pick newest release branch (alphabetic, will fail at v2.10)
        CXX="mpic++" .ci/install.plumed version="$(cd plumed2.git ; git branch | sed "s/^ *//" | grep '^v2\.[0-9]$' | tail -n 1)" repo=$PWD/plumed2.git
        # GB: in addition, we install master version as plumed_master
        CXX="mpic++" .ci/install.plumed version=master suffix=_master repo=$PWD/plumed2.git
        ccache -s

    - name: Install interface code
      run: |
         # Build final version of script including head 
         cat tests/script_head tests/${{matrix.replica}}/install.sh > install.sh
         chmod u+x install.sh
         echo Building ${{matrix.replica}} with stable plumed
         # Build static interface to latest stable version of PLUMED
         ./install.sh mode=static > tests/${{matrix.replica}}/stdout.txt 2> tests/${{matrix.replica}}/stderr.txt
         ./tests/check_status.sh code=${{matrix.replica}} 
         echo Building ${{matrix.replica}} with master plumed
         # Build runtime interface to (what will be) master version of PLUMED
         ./install.sh mode=runtime suffix=_master > tests/${{matrix.replica}}/stdout_master.txt 2> tests/${{matrix.replica}}/stderr_master.txt
         ./tests/check_status.sh code=${{matrix.replica}}  suffix=_master
         echo Running setup install for ${{matrix.replica}}
         # And setup the installation pages with logs and details of scripts
         python setupInstall.py -c ${{matrix.replica}} 

    - name: Test code
      run: | 
         # Run the tests of the code with the stable version of PLUMED
         python runtests.py -c ${{matrix.replica}} -v stable
         # Run the tests of the code with the master version of PLUMED
         python runtests.py -c ${{matrix.replica}} -v master
         # Build tarball for upload 
         tar cf testout.tar tests/${{matrix.replica}}/*.md tests/${{matrix.replica}}/*.yml tests/${{matrix.replica}}/*.zip stable_version.md pages

    - name: Upload artifact
      uses: actions/upload-artifact@v3
      with:
        name: testout-content${{matrix.replica}}
        path: testout.tar
        retention-days: 1

  # This is the job that uploads the website
  upload:
    # The type of runner that the job will run on
    runs-on: ubuntu-latest
    needs: build

    # Steps represent a sequence of tasks that will be executed as part of the job
    steps:
    # Checks-out your repository under $GITHUB_WORKSPACE, so your job can access it
    - uses: actions/checkout@v2
    - name: Download artifacts
      uses: actions/download-artifact@v3
    - name: Prepare for upload
      run: |
        # This extracts the data that was uploaded to the artifacts
        bash .ci/extract
        # This builds the page with the results of the tests
        python build.py
        # This pushes everything to the final website 
        #TODO: change push to "prepare"
        bash .ci/prepare _config.yml _layouts _data assets pigeon.png plumed.md nest.png contribute.md browse.md Info.md treadmill.png
  
    - name: Deploy to GitHub Pages
      uses: peaceiris/actions-gh-pages@v4
      if: github.ref == 'refs/heads/main'
      with:
          external_repository: plumed-testcenter/plumed-testcenter.github.io
          publish_branch: master
          deploy_key: ${{ secrets.ACTIONS_DEPLOY_KEY }}
          publish_dir: ./tmp/deploy
          force_orphan: true
          enable_jekyll: true
          user_name: 'PlumedBot'
          user_email: 'giovanni.bussi+plumedbot@gmail.com'
          
