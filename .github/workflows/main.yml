name: CI


on: 
  push:
  pull_request:
  schedule:
    #weekly scheduled
    - cron: '0 0 * * 0'

# A workflow run is made up of one or more jobs that can run sequentially or in parallel
jobs:
  # setting up the python cache
  setup-python:
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v4
    - name: Set up Python 3.9
      uses: actions/setup-python@v5
      with:
        python-version: 3.9
        cache: 'pip'
    - name: Setting up python
      run: pip install -r requirements.txt

  # setting up the plumed cache
  setup-plumed:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        version:
          - master
          - stable
    env:
      GH_TOKEN: ${{ github.token }}
    steps:
      - name: calculate cache key for the compilation
        id: get-key
        run: |
          if [[ ${{ matrix.version }} = master ]];then
          mastersha=$(gh api repos/plumed/plumed2/branches --paginate --jq '.[] | select( .name | match("^master$")) | .commit.sha')
          echo "key=$mastersha" >> $GITHUB_OUTPUT
          echo "branch=master" >> $GITHUB_OUTPUT
          echo "suffix=_master" >> $GITHUB_OUTPUT
          else
          # gets the list of the v2.* branches and sort it by version
          gh api repos/plumed/plumed2/branches --paginate --jq '.[] | select( .name | match("^v2.[0-9]{1,2}$")) | {name:.name, sha:.commit.sha}'  | jq -s 'sort_by ( .name | sub("v";"") | split (".") | map(tonumber))[-1]' > latest_version
          branch=$(cat latest_version | jq -r '.name')
          sha=$(cat latest_version | jq -r '.sha')
          echo "key=$sha" >> $GITHUB_OUTPUT
          echo "branch=$branch" >> $GITHUB_OUTPUT
          echo "suffix=" >> $GITHUB_OUTPUT
          fi
      - uses: actions/cache@v4
        with:
          path: |
            ~/.ccache
            ~/opt
          key: ccache-${{ runner.os }}-${{ matrix.version }}-${{ steps.get-key.outputs.key }}
          restore-keys: ccache-${{ runner.os }}-${{ matrix.version }}
      - name: Set paths
        run: |
            echo "$HOME/opt/bin" >> $GITHUB_PATH
            echo "CPATH=$HOME/opt/include:$HOME/opt/libtorch/include/torch/csrc/api/include/:$HOME/opt/libtorch/include/:$HOME/opt/libtorch/include/torch:$CPATH" >> $GITHUB_ENV
            echo "INCLUDE=$HOME/opt/include:$HOME/opt/libtorch/include/torch/csrc/api/include/:$HOME/opt/libtorch/include/:$HOME/opt/libtorch/include/torch:$INCLUDE" >> $GITHUB_ENV
            echo "LIBRARY_PATH=$HOME/opt/lib:$HOME/opt/libtorch/lib:$LIBRARY_PATH" >> $GITHUB_ENV
            echo "LD_LIBRARY_PATH=$HOME/opt/lib:$HOME/opt/libtorch/lib:$LD_LIBRARY_PATH" >> $GITHUB_ENV
            echo "PYTHONPATH=$HOME/opt/lib/plumed/python:$PYTHONPATH" >> $GITHUB_ENV
            # needed to avoid MPI warning
            echo "OMPI_MCA_btl=^openib" >> $GITHUB_ENV
      #we need to checkout to access .ci/install.libtorch
      - uses: actions/checkout@v4
      - name: Install dependencies
        run: |
          sudo apt update
          sudo apt install mpi-default-bin mpi-default-dev
          sudo apt install libfftw3-dev gsl-bin libgsl0-dev libboost-serialization-dev
          sudo apt install ccache
          ccache -p
          ccache -s
          mkdir -p ~/.ccache/ccache
          .ci/install.libtorch
      - name: Install plumed
        uses: Iximiel/install-plumed@v1
        with:
          CC: "ccache mpicc"
          CXX: "ccache mpic++"
          suffix: "${{ steps.get-key.outputs.suffix }}"
          version: "${{ steps.get-key.outputs.branch }}"
          extra_options: --enable-boost_serialization --enable-fftw --enable-libtorch LDFLAGS=-Wl,-rpath,$LD_LIBRARY_PATH --disable-basic-warnings
      - name: prepare plumed tar
        run: |
          cd $HOME
          tar cf plumed-${{matrix.version}}.tar opt/

      - name: Upload artifact
        uses: actions/upload-artifact@v4
        with:
          name: plumed-${{matrix.version}}
          path: ~/plumed-${{matrix.version}}.tar
          retention-days: 1

  build:
    needs: 
      - setup-python
      - setup-plumed
    strategy:
      matrix:
        replica: ["simplemd", "lammps", "quantum_espresso", "i-pi", "gromacs", "gromacs-vanilla"]
        # TODO: separate master and stable versions for running tests
        # plumed-version:
        #   - master
        #   - stable
    # The type of runner that the job will run on
    runs-on: ubuntu-latest

    steps:
    - uses: actions/checkout@v4

    - name: Set up Python 3.9
      uses: actions/setup-python@v5
      with:
        python-version: 3.9
        cache: 'pip'
    - name: Download artifacts
      uses: actions/download-artifact@v4
      with:
        pattern: plumed-*
        #merge multiple should merge the two directories
        merge-multiple: true
        path: ~/
    - name: Unpacking the artifacts
      run: |
        cd $HOME
        tar xf ~/plumed-master.tar
        tar xf ~/plumed-stable.tar

    - name: Set up ccache for the host program
      uses: actions/cache@v4
      with:
        path: ~/.ccache
        # here I assume that the version of your code is hardcode in the install.sh
        # so I am using it to reduce the number of caches
        # in case something is going very wrong, you can always delete the cache
        key: ccache-${{ runner.os }}-${{ matrix.replica }}-v${{ hashFiles( format('tests/{0}/install.sh',matrix.replica) ) }}
        # I am keeping also the older cache (without the -v)
        restore-keys: 
          ccache-${{ runner.os }}-${{ matrix.replica }}-v
          ccache-${{ runner.os }}-${{ matrix.replica }}

    - name: Set paths
      run: |
        echo "$HOME/opt/bin" >> $GITHUB_PATH
        echo "CPATH=$HOME/opt/include:$HOME/opt/libtorch/include/torch/csrc/api/include/:$HOME/opt/libtorch/include/:$HOME/opt/libtorch/include/torch:$CPATH" >> $GITHUB_ENV
        echo "INCLUDE=$HOME/opt/include:$HOME/opt/libtorch/include/torch/csrc/api/include/:$HOME/opt/libtorch/include/:$HOME/opt/libtorch/include/torch:$INCLUDE" >> $GITHUB_ENV
        echo "LIBRARY_PATH=$HOME/opt/lib:$HOME/opt/libtorch/lib:$LIBRARY_PATH" >> $GITHUB_ENV
        echo "LD_LIBRARY_PATH=$HOME/opt/lib:$HOME/opt/libtorch/lib:$LD_LIBRARY_PATH" >> $GITHUB_ENV
        echo "PYTHONPATH=$HOME/opt/lib/plumed/python:$PYTHONPATH" >> $GITHUB_ENV
        # needed to avoid MPI warning
        echo "OMPI_MCA_btl=^openib" >> $GITHUB_ENV

    - name: Setup PLUMED software
      run: |
        sudo apt update
        sudo apt install ccache
        sudo apt install mpi-default-bin mpi-default-dev gfortran
        sudo apt install libfftw3-dev gsl-bin libgsl0-dev libboost-serialization-dev
        sudo apt-get update
        pip install -r requirements.txt
        mkdir -p ~/.ccache/ccache
        .ci/install.libtorch

    - name: Install interface code
      run: |
         # Build final version of script including head 
         cat tests/script_head tests/${{matrix.replica}}/install.sh > install.sh
         chmod u+x install.sh
         echo Building ${{matrix.replica}} with stable plumed
         # Build static interface to latest stable version of PLUMED
         ./install.sh mode=static > tests/${{matrix.replica}}/stdout.txt 2> tests/${{matrix.replica}}/stderr.txt
         ./tests/check_status.sh code=${{matrix.replica}} 
         echo Building ${{matrix.replica}} with master plumed
         # Build runtime interface to (what will be) master version of PLUMED
         ./install.sh mode=runtime suffix=_master > tests/${{matrix.replica}}/stdout_master.txt 2> tests/${{matrix.replica}}/stderr_master.txt
         ./tests/check_status.sh code=${{matrix.replica}}  suffix=_master
         echo Running setup install for ${{matrix.replica}}
         # And setup the installation pages with logs and details of scripts
         python setupInstall.py -c ${{matrix.replica}}
    - name: Display installation results
      run: |
        echo tests/${{matrix.replica}}/info.yml
        cat tests/${{matrix.replica}}/info.yml

    # when uncommenting these steps remember to comment os.remove(path) in setupInstall.py
    # - name: compile output for stable
    #   run: | 
    #     echo "stderr stable"
    #     cat tests/${{matrix.replica}}/stderr.txt
    #     echo "stdout stable"
    #     cat tests/${{matrix.replica}}/stdout.txt

    # - name: compile output for master
    #   run: | 
    #     echo "stderr master"
    #     cat tests/${{matrix.replica}}/stderr_master.txt
    #     echo "stdout master"
    #     cat tests/${{matrix.replica}}/stdout_master.txt
    - name: Test code
      run: | 
         echo Running tests for ${{matrix.replica}} with PLUMED from  stable branch
         python runtests.py --code=${{matrix.replica}} --version=stable --prepare-pages
         echo Running tests for ${{matrix.replica}} with PLUMED from  master branch
         python runtests.py --code=${{matrix.replica}} --version=master
         # Build tarball for upload 
         tar cf testout.tar tests/${{matrix.replica}}/*.md tests/${{matrix.replica}}/*.yml tests/${{matrix.replica}}/*.zip

    - name: Upload artifact
      uses: actions/upload-artifact@v4
      with:
        name: testout-content${{matrix.replica}}
        path: testout.tar
        retention-days: 1

  # This is the job that uploads the website
  upload:
    # The type of runner that the job will run on
    runs-on: ubuntu-latest
    needs: build

    steps:
    - uses: actions/checkout@v4
    - name: Download artifacts
      uses: actions/download-artifact@v4
      with:
        pattern: testout-content*
        #merge-multiple: true
    - name: Prepare for upload
      run: |
        # This extracts the data that was uploaded to the artifacts
        bash .ci/extract
        #Â This builds the page with the results of the tests
        python build.py
        # This pushes everything to the final website 
        bash .ci/prepare _config.yml _layouts _data assets pigeon.png plumed.md nest.png contribute.md browse.md Info.md treadmill.png
  
    - name: Deploy to GitHub Pages
      uses: peaceiris/actions-gh-pages@v4
      if: github.ref == 'refs/heads/main'
      with:
          external_repository: plumed-testcenter/plumed-testcenter.github.io
          publish_branch: master
          deploy_key: ${{ secrets.ACTIONS_DEPLOY_KEY }}
          publish_dir: ./tmp/deploy
          force_orphan: true
          enable_jekyll: true
          user_name: 'PlumedBot'
          user_email: 'giovanni.bussi+plumedbot@gmail.com'
    - name: Upload a debug artifact
      if: github.ref != 'refs/heads/main'
      uses: actions/upload-artifact@v4
      # for this we do not care about losing permissions
      with:
          name: debug-deploy
          path: ./tmp/deploy
          compression-level: 9
          retention-days: 1
